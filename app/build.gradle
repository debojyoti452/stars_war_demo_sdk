plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdk globalConfiguration["androidCompileSDK"]

    defaultConfig {
        applicationId "com.example.customerio"

        minSdk globalConfiguration["androidMinSDK"]
        targetSdk globalConfiguration["androidCompileSDK"]

        versionCode globalConfiguration["androidVersionCode"]
        versionName globalConfiguration["androidVersionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    def ext = rootProject.ext
    implementation project(':lib')

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation(
            ext.libDependencies.kotlin,
            ext.libDependencies.kotlinKtx,
            ext.libDependencies.coroutines,
            ext.libDependencies.coroutinesAndroid,
            ext.libDependencies.timber,
            ext.libDependencies.gson,

            ext.uiDependencies.material,
            ext.uiDependencies.navigationFragment,
            ext.uiDependencies.navigationUI,
            ext.uiDependencies.viewModel,
            ext.uiDependencies.daggerHiltAndroid,
    )

    kapt(
            ext.uiDependencies.daggerXcompiler,
            ext.uiDependencies.daggerCompiler,
    )
}

/**
 * get value from local.properties
 *
 * @return value of the key
 */
def getLocalPropertiesValue(key) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty(key)
}
